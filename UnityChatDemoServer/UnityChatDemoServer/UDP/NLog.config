<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="c:\temp\nlog-internal.log">

  <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <variable name="myvar" value="myvalue"/>

  <!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
  <targets>

    <!--
    add your targets here
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!--
    每个target代表一个输出目标，它主要包含两个属性：name和type。name是输出模板的名称，在后面的路由规则中使用，type则是输出类型，常见的有
    Console     输出到控制台
    Debugger    输出到输出
    File        输出到文件
    Mail        输出为邮件发送
    Network     输出到网络地址
    Database    输出到数据库
    -->

    <target xsi:type="Debugger" name="debug"/>

    <!--屏幕打印消息-->
    <target xsi:type="ColoredConsole" name="coloredConsole"/>
    <!--保存至文件-->
    <target xsi:type="File" name="InfoFile"
           fileName="${basedir}/Logs/Info/${date:format=yyyy}/${date:format=MM}/${shortdate}.log"
           layout="${longdate} ${uppercase:${level}} ${message}" />
    <!--保存至文件-->
    <target xsi:type="File" name="ErrorFile"
           fileName="${basedir}/Logs/Error/${date:format=yyyy}/${date:format=MM}/${shortdate}.log"
           layout="[${date:format=yyyy-MM-dd HH\:mm\:ss}] [${uppercase:${level}}] [${callsite}]: ${message}" keepFileOpen="false" encoding="iso-8859-2" />
    <!--
    Write events to a file with the date in the filename.
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->
  </targets>

  <!--
  路由规则rule
  路由规则主要用于将日志和输出目标匹配起来，它一般有如下几个属性
  name - 记录者的名字 (允许使用通配符*)
  minlevel - 匹配日志范围的最低级别
  maxlevel - 匹配日志范围的最高级别
  level - 匹配的单一日志级别
  levels - 匹配的一系列日志级别，由逗号分隔。
  writeTo - 规则匹配时日志应该被写入的一系列目标，由逗号分隔。
  
  Level	实例
  Fatal	最高级别：重要的东西
  Error	例如应用程序崩溃/异常。
  Warn	行为不正确但应用程序可以继续
  Info	正常行为，如邮件发送，用户更新配置文件等
  Debug	执行的查询，用户通过身份验证，会话已过期
  Trace	开始方法X，结束方法X等
  -->

  <rules>
    <!-- add your logging rules here -->
    <logger name="*"  minlevel="Trace" writeTo="debug"/>
    <logger name="*"  minlevel="Trace" writeTo="coloredConsole"/>
    <logger name="*"  minlevel="Info" maxlevel="Info" writeTo="InfoFile"/>
    <logger name="*" minlevel="Warn" writeTo="ErrorFile" />
    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
  </rules>
</nlog>
